/**
 * This file is part of the node-appstore-connect distribution.
 * Copyright (c) e.GO Digital GmbH, Aachen, Germany (https://www.e-go-digital.com/)
 *
 * node-appstore-connect is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, version 3.
 *
 * node-appstore-connect is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
/// <reference types="node" />
import * as moment from 'moment';
/**
 * Options for a 'Client' instance.
 */
export interface ClientOptions {
    /**
     * The API key.
     */
    'apiKey': string;
    /**
     * The number in sec, the token will expire. Default: 1200
     */
    'expriresIn'?: number;
    /**
     * The ID of the issuer.
     */
    'issuerId': string;
    /**
     * The private key.
     */
    'privateKey': PrivateKey;
}
/**
 * The frequence of a report.
 */
export declare enum DownloadSalesReportFrequency {
    /**
     * Daily
     */
    Daily = "DAILY",
    /**
     * Monthly
     */
    Monthly = "MONTHLY",
    /**
     * Weekly
     */
    Weekly = "WEEKLY",
    /**
     * Yearly
     */
    Yearly = "YEARLY"
}
/**
 * A filter for a 'SalesReportRow' item.
 *
 * @param {SalesReportRow} row The current item / row.
 *
 * @return {boolean|PromiseLike<boolean>} The result, that indicates if filter criteria matches or not.
 */
export declare type SalesReportRowFilter = (row: SalesReportRow) => boolean | PromiseLike<boolean>;
/**
 * Options for 'Client.downloadSalesReportSummary()' method.
 */
export interface DownloadSalesReportSummaryOptions {
    /**
     * The custom report date.
     */
    'date'?: moment.MomentInput;
    /**
     * A filter for a sales report row.
     */
    'filter'?: SalesReportRowFilter;
    /**
     * The frequency. Default: Weekly.
     */
    'frequency'?: DownloadSalesReportFrequency;
    /**
     * The ID of the vendor.
     */
    'vendorId': string;
}
/**
 * Options for 'Client.getAppDownloads()' method.
 */
export interface GetAppDownloadsOptions extends DownloadSalesReportSummaryOptions {
}
/**
 * Result of a 'Client.getAppDownloads()' method call.
 */
export interface GetAppDownloadsResult {
    /**
     * The list of apps.
     */
    'apps': {
        [appId: string]: GetAppDownloadsAppItem;
    };
}
/**
 * An app item of 'GetAppDownloadsResult.apps'.
 */
export interface GetAppDownloadsAppItem {
    /**
     * The number of downloads.
     */
    'downloads': number;
}
/**
 * A value for an App Store Connect private key.
 */
export declare type PrivateKey = string | Buffer;
/**
 * A row of a sales report CSV.
 */
export interface SalesReportRow {
    'Apple Identifier': string;
    'Begin Date': string;
    'CMB': string;
    'Category': string;
    'Client': string;
    'Country Code': string;
    'Currency of Proceeds': string;
    'Customer Currency': string;
    'Customer Price': string;
    'Developer Proceeds': string;
    'Developer': string;
    'Device': string;
    'End Date': string;
    'Order Type': string;
    'Parent Identifier': string;
    'Period': string;
    'Preserved Pricing': string;
    'Proceeds Reason': string;
    'Product Type Identifier': string;
    'Promo Code': string;
    'Provider Country': string;
    'Provider': string;
    'SKU': string;
    'Subscription': string;
    'Supported Platforms': string;
    'Title': string;
    'Units': string;
    'Version': string;
}
/**
 * A client for the App Store Connect API.
 */
export declare class Client {
    readonly options: ClientOptions;
    private _bearerToken;
    /**
     * Initializes a new instance of that class.
     *
     * @param {ClientOptions} options The options.
     */
    constructor(options: ClientOptions);
    private _getBearerToken;
    /**
     * Downloads a summary of a sales report.
     *
     * @param {DownloadSalesReportSummaryOptions} opts The options.
     *
     * @return {Promise<SalesReportRow[]>} The promise with the rows.
     */
    downloadSalesReportSummary(opts: DownloadSalesReportSummaryOptions): Promise<SalesReportRow[]>;
    /**
     * Returns a summary of app downloads.
     *
     * @param {GetAppDownloadsOptions} opts The options.
     *
     * @return {Promise<GetAppDownloadsResult>} The promise with the result.
     */
    getAppDownloads(opts: GetAppDownloadsOptions): Promise<GetAppDownloadsResult>;
}
